const fs = require('fs');
const path = require('path');
const axios = require('axios');
const spacefiles = fs.readdirSync( path.resolve( __dirname, '../spaces' ), { encoding: 'utf8' } );
const queryURL = new URL( "https://library.leeds.ac.uk/opening-hours-calendar" );
axios({
    method: 'get',
    url: queryURL.href,
    headers: {}
}).then( response => {
    if ( response.statusText == "OK" ) {
        let opening = {};
        ['edward','brotherton','health','laidlaw'].forEach( lib => {
            opening[lib] = {};
            let weekdates = getWeekDates();
            weekdates.forEach( dates => {
                opening[lib][dates.day] = getOpeningHours( response.data.library[ lib ], dates.datestring );
            });
        });
        spacefiles.forEach( filename => {
            let update = false;
            if ( filename !== '.' && filename !== '..' ) {
                var spaceData = fs.readFileSync( path.resolve( __dirname, '../spaces/', filename ) );
                const spaceJSON = JSON.parse( spaceData );
                if ( spaceJSON.space_type == 'Library' ) {
                    switch ( spaceJSON.building ) {
                        case "Edward Boyle library":
                            spaceJSON.opening_hours = opening.edward;
                            update = true;
                            break;
                        case "Worsley building":
                            spaceJSON.opening_hours = opening.health;
                            update = true;
                            break;
                        case "Laidlaw library":
                            spaceJSON.opening_hours = opening.laidlaw;
                            update = true;
                            break;
                        case "Brotherton Library":
                            spaceJSON.opening_hours = opening.brotherton;
                            update = true;
                            break;
                    }
                }
            }
            if ( 0 && update ) {
                fs.writeFileSync(path.resolve( __dirname, '../spaces/', filename ), JSON.stringify(spaceJSON), err => {
                    if (err) {
                        console.error(err);
                        return;
                    }
                });
            }
        });
    } else {
        console.log( response );
    }
}).catch( error => {
    if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(error.response.data);
        console.log(error.response.status);
        console.log(error.response.headers);
    } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);
    } else {
        // Something happened in setting up the request that triggered an Error
        console.log('Error', error.message);
    }
    console.log(error.config);
});

function getWeekDates() {
    let weekdates = [];
    let d = new Date();
    let days = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'];
    /* set date to previous monday */
    d.setDate( d.getDate() - ( ( d.getDay() + 6 ) % 7 ) );
    for ( let i = 0; i < 7; i++ ) {
        let datestring = d.getFullYear() + '-' + ( '0' + ( d.getMonth() + 1 ) ).slice( -2 ) + '-' + ( '0' + d.getDate() ).slice( -2 );
        weekdates.push ( { 'day': days[i], 'datestring': datestring } );
        d.setDate( d.getDate() + 1 );
    }
    return weekdates;
}
function getOpeningHours( data, datestr ) {
    let opening = { 'open': false, 'from': '', 'to': '' };
    data.forEach( d => {
        let regex = /([0-9]+:[0-9]+)/ig;
        if ( d.date == datestr ) {
            let hours = d.open.match( regex );
            if ( hours.length >= 2 ) {
                opening = { 'open': true, 'from': hours[0], 'to': hours[1] };
            }
        }
    });
    return opening;
}

